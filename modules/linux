modules-y += linux

ifeq "$(CONFIG_LINUX_VERSION)" "4.14.62"
linux_version := 4.14.62
linux_hash := 51ca4d7e8ee156dc0f19bc7768915cfae41dbb0b4f251e4fa8b178c5674c22ab
else ifeq "$(CONFIG_LINUX_VERSION)" "4.19.139"
linux_version := 4.19.139
linux_hash := 9c4ebf21fe949f80fbcfbbd6e7fe181040d325e89475e230ab53ef01f9d55605
else ifeq "$(CONFIG_LINUX_VERSION)" "5.4.68"
linux_version := 5.4.68
linux_hash := 0e93876c5ae8dc0c55cbe631971a46ab02b90cf7461fed3085703a5e4e3cd6dd
else ifeq "$(CONFIG_LINUX_VERSION)" "5.4.69"
linux_version := 5.4.69
linux_hash := a8b31d716b397303a183e42ad525ff2871024a43e3ea530d0fdf73b7f9d27da7
#
# linuxboot systems should *NOT* use 5.10.5 until a proper review has
# been done. This is because `0000-efi_bds.patch` did not cleanly port
# from 5.4.69 to 5.10.5 which directly affects linuxboot systems.
#
else ifeq "$(CONFIG_LINUX_VERSION)" "5.10.5"
linux_version := 5.10.5
linux_hash := 3991a9e16a187d78d5f414d89236ae5d7f404a69e60c4c42a9d262ee19612ef4
else ifeq "$(CONFIG_LINUX_VERSION)" "5.15.45"
linux_version := 5.15.45
linux_hash := b2390d7d977c66036ef0ceb294e408f2bdaab6dfeeb8ff4f4e0a84b71f8d8754
else ifeq "$(CONFIG_LINUX_VERSION)" "1.20220331"
linux_version := 1.20220331
linux_hash := a31f481905f0b43427c20afcc237914ce346c3c3404d5fc1af0cc7ecc5d90cbd
else

$(error "$(BOARD): does not specify linux kernel version under CONFIG_LINUX_VERSION")
endif 

linux_base_dir := linux-$(linux_version)

# TODO: fixup the patch process
# input file in the heads config/ dir
# Allow board config to specialize Linux configuration if necessary
linux_kconfig := $(or $(CONFIG_LINUX_CONFIG),config/linux.config)

# Output directory for the Linux kernel build is based on the
# configuration file name, not the board name
linux_dir := $(linux_base_dir)/$(notdir $(basename $(linux_kconfig)))
linux_major_ver := $(basename $(basename $(CONFIG_LINUX_VERSION)))
ifeq "$(CONFIG_LINUX_VERSION)" "1.20220331"
linux_tar := linux-$(linux_version).tar.gz
linux_url := https://github.com/raspberrypi/linux/tarball/$(linux_version)
else
linux_tar := linux-$(linux_version).tar.xz
linux_url := https://cdn.kernel.org/pub/linux/kernel/v$(linux_major_ver).x/$(linux_tar)
endif

# Ensure that touching the config file will force a reconfig/rebuild
$(build)/$(linux_dir)/.configured: $(linux_kconfig)

ifeq "$(strip $(arch))" "x86_64"
linux_arch := x86
linux_output += arch/$(linux_arch)/boot/bzImage
else
ifeq "$(strip $(arch))" "aarch64"
linux_arch := arm64
linux_output += arch/$(linux_arch)/boot/Image.gz
endif
endif

linux_configure := \
	mkdir -p "$(build)/$(linux_dir)" \
	&& cp "$(pwd)/$(linux_kconfig)" "$(build)/$(linux_dir)/.config" \
	&& $(MAKE) -C .. \
		CROSS_COMPILE="$(CROSS)" \
		O="$(build)/$(linux_dir)" \
		ARCH=$(linux_arch) \
		olddefconfig \

# Once we have extracted the kernel tar file, install the headers
# so that other submodules can make use of them.
$(INSTALL)/include/linux/limits.h: $(build)/$(linux_base_dir)/.canary
	$(MAKE) \
		-C "$(build)/$(linux_base_dir)" \
		INSTALL_HDR_PATH="$(INSTALL)" \
		O="$(linux_dir)" \
		KCONFIG_CONFIG="$(pwd)/$(linux_kconfig)" \
		ARCH=$(linux_arch) \
		headers_install

# qemu
linux_modules-$(CONFIG_LINUX_E1000)	+= drivers/net/ethernet/intel/e1000/e1000.ko

# x230 and winterfell
linux_modules-$(CONFIG_LINUX_E1000E)	+= drivers/net/ethernet/intel/e1000e/e1000e.ko

# Dell R630 ethernet and RAID controller
linux_modules-$(CONFIG_LINUX_IGB)	+= drivers/net/ethernet/intel/igb/igb.ko
linux_modules-$(CONFIG_LINUX_MEGARAID)	+= drivers/scsi/megaraid/megaraid_mm.ko
linux_modules-$(CONFIG_LINUX_MEGARAID)	+= drivers/scsi/megaraid/megaraid_sas.ko
linux_modules-$(CONFIG_LINUX_MEGARAID)	+= drivers/scsi/megaraid/megaraid_mbox.ko

# Intel s2600wf scsi controller
linux_modules-$(CONFIG_LINUX_SCSI_GDTH)	+= drivers/scsi/gdth.ko
linux_modules-$(CONFIG_LINUX_ATA)	+= drivers/ata/libata.ko
linux_modules-$(CONFIG_LINUX_AHCI)	+= drivers/ata/ahci.ko
#linux_modules-$(CONFIG_LINUX_AHCI)	+= drivers/ata/ahci_platform.ko
linux_modules-$(CONFIG_LINUX_AHCI)	+= drivers/ata/libahci.ko
#linux_modules-$(CONFIG_LINUX_AHCI)	+= drivers/ata/libahci_platform.ko

# Solarflare network card
linux_modules-$(CONFIG_LINUX_SFC)	+= drivers/net/ethernet/sfc/sfc.ko
linux_modules-$(CONFIG_LINUX_SFC)	+= drivers/net/mdio.ko

# Mellanox ConnectX-3 (winterfell)
linux_modules-$(CONFIG_LINUX_MLX4)	+= drivers/net/ethernet/mellanox/mlx4/mlx4_core.ko
linux_modules-$(CONFIG_LINUX_MLX4)	+= drivers/net/ethernet/mellanox/mlx4/mlx4_en.ko

# Broadcom 57302 (25g) for Tioga Pass
linux_modules-$(CONFIG_LINUX_BCM)	+= drivers/net/ethernet/broadcom/bnxt/bnxt_en.ko

# USB modules for both types of controllers
# older boards also need ohci and uhci
linux_modules-$(CONFIG_LINUX_USB_COMPANION_CONTROLLER)	+= drivers/usb/host/uhci-hcd.ko
linux_modules-$(CONFIG_LINUX_USB_COMPANION_CONTROLLER)	+= drivers/usb/host/ohci-hcd.ko
linux_modules-$(CONFIG_LINUX_USB_COMPANION_CONTROLLER)	+= drivers/usb/host/ohci-pci.ko
linux_modules-$(CONFIG_LINUX_USB)	+= drivers/usb/host/ehci-hcd.ko
linux_modules-$(CONFIG_LINUX_USB)	+= drivers/usb/host/ehci-pci.ko
linux_modules-$(CONFIG_LINUX_USB)	+= drivers/usb/host/xhci-hcd.ko
linux_modules-$(CONFIG_LINUX_USB)	+= drivers/usb/host/xhci-pci.ko
linux_modules-$(CONFIG_LINUX_USB)	+= drivers/usb/storage/usb-storage.ko

#USB modules when a USB keyboard is defined in board config
linux_modules-$(CONFIG_USB_KEYBOARD)	+= drivers/hid/usbhid/usbhid.ko

# NVMe driver for winterfell and other servers
linux_modules-$(CONFIG_LINUX_NVME)	+= drivers/nvme/host/nvme.ko
linux_modules-$(CONFIG_LINUX_NVME)	+= drivers/nvme/host/nvme-core.ko

# ME drivers for talking the the management engine
linux_modules-$(CONFIG_LINUX_MEI)	+= drivers/misc/mei/mei.ko
linux_modules-$(CONFIG_LINUX_MEI)	+= drivers/misc/mei/mei-me.ko

# MMC/sdard support through sdhci rtsx_pci_sdmmc and rtsx_usb_sdmmc support
# Common MMC
linux_modules-$(CONFIG_LINUX_MMC) += drivers/mmc/core/mmc_core.ko
linux_modules-$(CONFIG_LINUX_MMC) += drivers/mmc/core/mmc_block.ko
# SDHCI
linux_modules-$(CONFIG_LINUX_MMC) += drivers/mmc/host/sdhci.ko
linux_modules-$(CONFIG_LINUX_MMC) += drivers/mmc/host/cqhci.ko
linux_modules-$(CONFIG_LINUX_MMC) += drivers/mmc/host/sdhci-acpi.ko
linux_modules-$(CONFIG_LINUX_MMC) += drivers/mmc/host/sdhci-pci.ko
# RTSX
ifneq "$(linux_arch)" "arm64"
linux_modules-$(CONFIG_LINUX_MMC) += drivers/mfd/mfd-core.ko
endif
linux_modules-$(CONFIG_LINUX_MMC) += drivers/misc/cardreader/rtsx_pci.ko
linux_modules-$(CONFIG_LINUX_MMC) += drivers/mmc/host/rtsx_pci_sdmmc.ko
linux_modules-$(CONFIG_LINUX_MMC) += drivers/misc/cardreader/rtsx_usb.ko
linux_modules-$(CONFIG_LINUX_MMC) += drivers/mmc/host/rtsx_usb_sdmmc.ko
# minor drivers
linux_modules-$(CONFIG_LINUX_MMC_MINOR) += drivers/misc/cb710/cb710.ko
linux_modules-$(CONFIG_LINUX_MMC_MINOR) += drivers/mmc/host/cb710-mmc.ko
linux_modules-$(CONFIG_LINUX_MMC_MINOR) += drivers/misc/tifm_core.ko
linux_modules-$(CONFIG_LINUX_MMC_MINOR) += drivers/mmc/host/tifm_sd.ko
linux_modules-$(CONFIG_LINUX_MMC_MINOR) += drivers/mmc/host/toshsd.ko
linux_modules-$(CONFIG_LINUX_MMC_MINOR) += drivers/mmc/host/via-sdmmc.ko
linux_modules-$(CONFIG_LINUX_MMC_MINOR) += drivers/mmc/host/vub300.ko

# Support for sdhci on non-enumerable buses for aarch64
linux_modules-$(CONFIG_LINUX_MMC_AARCH64) += drivers/mmc/host/sdhci-pltfm.ko
linux_modules-$(CONFIG_LINUX_MMC_AARCH64) += drivers/mmc/host/bcm2835.ko
linux_modules-$(CONFIG_LINUX_MMC_AARCH64) += drivers/mmc/host/dw_mmc.ko
linux_modules-$(CONFIG_LINUX_MMC_AARCH64) += drivers/mmc/host/dw_mmc-pltfm.ko
linux_modules-$(CONFIG_LINUX_MMC_AARCH64) += drivers/mmc/host/dw_mmc-k3.ko
linux_modules-$(CONFIG_LINUX_MMC_AARCH64) += drivers/mmc/host/dw_mmc-rockchip.ko
linux_modules-$(CONFIG_LINUX_MMC_AARCH64) += drivers/mmc/host/meson-gx-mmc.ko
linux_modules-$(CONFIG_LINUX_MMC_AARCH64) += drivers/mmc/host/meson-gx-mmc.ko
linux_modules-$(CONFIG_LINUX_MMC_AARCH64) += lib/crc7.ko
linux_modules-$(CONFIG_LINUX_MMC_AARCH64) += lib/crc-itu-t.ko
linux_modules-$(CONFIG_LINUX_MMC_AARCH64) += drivers/mmc/host/mmc_spi.ko
linux_modules-$(CONFIG_LINUX_MMC_AARCH64) += drivers/mmc/host/of_mmc_spi.ko
linux_modules-$(CONFIG_LINUX_MMC_AARCH64) += drivers/mmc/host/sdhci-esdhc-imx.ko
linux_modules-$(CONFIG_LINUX_MMC_AARCH64) += drivers/mmc/host/sdhci_f_sdh30.ko
linux_modules-$(CONFIG_LINUX_MMC_AARCH64) += drivers/mmc/host/sdhci-iproc.ko
linux_modules-$(CONFIG_LINUX_MMC_AARCH64) += drivers/mmc/host/sdhci-msm.ko
linux_modules-$(CONFIG_LINUX_MMC_AARCH64) += drivers/mmc/host/sdhci-of-arasan.ko
linux_modules-$(CONFIG_LINUX_MMC_AARCH64) += drivers/mmc/host/sdhci-of-esdhc.ko
linux_modules-$(CONFIG_LINUX_MMC_AARCH64) += drivers/mmc/host/sdhci-tegra.ko
linux_modules-$(CONFIG_LINUX_MMC_AARCH64) += drivers/mmc/host/sdhci-xenon-driver.ko
linux_modules-$(CONFIG_LINUX_MMC_AARCH64) += drivers/mmc/host/sunxi-mmc.ko

EXTRA_FLAGS := -fdebug-prefix-map=$(pwd)=heads -gno-record-gcc-switches

ifeq "$(CONFIG_LINUX_VERSION)" "4.14.62"
EXTRA_FLAGS += -Wno-cast-function-type
endif

linux_target := \
	O="$(build)/$(linux_dir)" \
	CROSS_COMPILE="$(CROSS)" \
	AFLAGS_KERNEL="$(EXTRA_FLAGS)" \
	CFLAGS_KERNEL="$(EXTRA_FLAGS)" \
	CFLAGS_MODULE="$(EXTRA_FLAGS)" \
	KBUILD_BUILD_USER=$(notdir $(linux_kconfig)) \
	KBUILD_BUILD_HOST=linuxboot \
	KBUILD_BUILD_TIMESTAMP="1970-00-00" \
	KBUILD_BUILD_VERSION=0 \
	ARCH=$(linux_arch) \
	$(MAKE_JOBS) \

# We cross compile linux now
linux_depends := musl-cross

#
# Linux kernel module installation
#
# This is special cases since we have to do a special strip operation on
# the kernel modules to make them fit into the ROM image.
#
module_initrd_dir	:= $(shell mktemp -d)
module_initrd_lib_dir	:= $(module_initrd_dir)/lib/modules
FOO := $(shell mkdir -p "$(module_initrd_lib_dir)")

define linux_module =

# Each module depends on building the Linux kernel
$(build)/$(linux_dir)/$1: $(build)/$(linux_dir)/$(linux_output)

# The cpio file will depend on every module
$(build)/$(BOARD)/modules.cpio: $(module_initrd_lib_dir)/$(notdir $1)

# Strip the modules when we install them so that they will be extra small
$(module_initrd_lib_dir)/$(notdir $1): $(build)/$(linux_dir)/$1
	$(call do,INSTALL-MODULE,$1, \
		$(CROSS)strip \
			--preserve-dates \
			--strip-debug \
			-o "$$@" \
			"$$<" \
	)
endef

$(call map,linux_module,$(linux_modules-y))

# We can't rebuild the module initrd until the kernel has been rebuilt
$(build)/$(BOARD)/modules.cpio: $(build)/$(linux_dir)/.build
	$(call do-cpio,$@,$(module_initrd_dir))
	@$(RM) -rf "$(module_initrd_dir)"


# The output of the linux.intermediate is the bzImage in the
# linus build directory.  We need to copy it into our board
# specific directory for ease of locating it later.
$(build)/$(BOARD)/bzImage: $(build)/$(linux_dir)/.build
	$(call do-copy,$(dir $<)/$(linux_output),$@)
	@touch $@ # force a timestamp update
	@sha256sum "$@" | tee -a "$(HASHES)"

# Build kernel second time, now that initrd is built.
$(build)/$(BOARD)/$(LINUX_IMAGE_FILE).bundled: \
	$(build)/$(initrd_dir)/initrd.cpio.xz \
	$(build)/$(BOARD)/$(LINUX_IMAGE_FILE)
	xz --decompress --stdout --force "$<" > $(build)/$(initrd_dir)/initrd.cpio
	$(MAKE) -C "$(build)/$(linux_dir)" $(linux_target)
	$(call do-copy,$(build)/$(linux_dir)/$(linux_output),$@)
	@touch $@ # force a timestamp update
	@sha256sum "$@" | tee -a "$(HASHES)"

# menuconfig target allows us to easily reconfigure this Linux kernel
# Afterwars make linux.saveconfig to generate a minimal config from it
linux.menuconfig:
	$(MAKE) \
		-C "$(build)/$(linux_base_dir)" \
		O="$(build)/$(linux_dir)" \
		ARCH=$(linux_arch) \
		menuconfig \

# The config file in the repo is stored as a "defconfig" format
# which only includes the options that have changed from the defaults.
linux.saveconfig:
	$(MAKE) \
		-C "$(build)/$(linux_base_dir)" \
		O="$(build)/$(linux_dir)" \
		ARCH=$(linux_arch) \
		savedefconfig
	mv "$(build)/$(linux_dir)/defconfig" "$(pwd)/$(linux_kconfig)"
